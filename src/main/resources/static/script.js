const API_BASE = "http://localhost:8080";


const DEFAULT_ID = 0;

// üîÑ R√©cup√©ration des scores
async function fetchScores() {
  console.log("üìä [SCORES] R√©cup√©ration en cours...");
  try {
    const res = await fetch(`${API_BASE}/scores`);
    const data = await res.json();
    console.log("‚úÖ [SCORES] Donn√©es re√ßues :", data);

    const list = document.getElementById("scoreList");
    list.innerHTML = "";
    data.sort((a, b) => b.score - a.score).forEach(player => {
      const li = document.createElement("li");
      li.innerHTML = `Joueur ${player.id} <span>${player.score} pts</span>`;
      list.appendChild(li);
    });
  } catch (err) {
    console.error("‚ùå [SCORES] Erreur lors de la r√©cup√©ration :", err);
  }
}

// üîÅ R√©initialisation du jeu
async function handleReset() {
  console.log("üîÑ [RESET] Envoi de la commande de r√©initialisation...");
  try {
    const res = await fetch(`${API_BASE}/reset`, { method: "POST" });
    const text = await res.text();
    console.log(`‚úÖ [RESET] R√©ponse : "${text}"`);
    await fetchScores();
  } catch (err) {
    console.error("‚ùå [RESET] Erreur lors de la r√©initialisation :", err);
    alert("Erreur pendant la r√©initialisation");
  }
}

// ‚úÖ Validation d'une bonne r√©ponse
async function handleValidate() {
  console.log(`‚úÖ [VALIDATE] Validation de la r√©ponse pour le joueur ID=${DEFAULT_ID}...`);
  try {
    const res = await fetch(`${API_BASE}/validate/${DEFAULT_ID}`, { method: "POST" });
    const text = await res.text();
    console.log(`‚úÖ [VALIDATE] R√©ponse du serveur : "${text}"`);
    await fetchScores();
  } catch (err) {
    console.error("‚ùå [VALIDATE] Erreur pendant la validation :", err);
    alert("Erreur pendant la validation");
  }
}

// ‚ùå Refus (mauvaise r√©ponse)
async function handleBuzz() {
  console.log(`‚ùå [BUZZ] Refus du joueur ID=${DEFAULT_ID}...`);
  try {
    const res = await fetch(`${API_BASE}/buzz/${DEFAULT_ID}`, { method: "POST" });
    const text = await res.text();
    console.log(`‚úÖ [BUZZ] R√©ponse du serveur : "${text}"`);
    await fetchScores();
  } catch (err) {
    console.error("‚ùå [BUZZ] Erreur pendant le refus :", err);
    alert("Erreur pendant le refus");
  }
}

// üü¢ Initialisation
console.log("üöÄ [INIT] Chargement initial des scores...");
fetchScores();

// üîÅ Rafra√Æchissement r√©gulier
setInterval(() => {
  console.log("‚è±Ô∏è [AUTO-REFRESH] Rafra√Æchissement des scores...");
  fetchScores();
}, 2000);

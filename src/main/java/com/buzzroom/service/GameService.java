package com.buzzroom.service;

import com.buzzroom.controller.SseController;
import com.buzzroom.model.Player;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class GameService {

    private final Map<Integer, Player> players = new HashMap<>();
    private Integer activePlayerId = null;
    private boolean buzzLocked = false;

    private final SseController sseController;

    public GameService(SseController sseController) {
        this.sseController = sseController;
    }

    public String handleBuzz(int id) {
        players.putIfAbsent(id, new Player(id));
        Player p = players.get(id);

        if (buzzLocked) return "Un joueur a d√©j√† buzz√©.";
        if (p.isBlocked()) return "Joueur bloqu√©.";

        buzzLocked = true;
        activePlayerId = id;

        sseController.sendEvent("buzz:" + id); // üîî Notifie l'interface web

        return "Joueur " + id + " a buzz√©.";
    }

    public String validateAnswer(int id) {
        if (!Objects.equals(activePlayerId, id)) return "Ce joueur n'est pas actif.";

        players.get(id).addScore(1);
        sseController.sendEvent("valid:" + id); // üéØ Notifie le front : bonne r√©ponse

        reset();
        return "Bonne r√©ponse. +1 point.";
    }

    public String reset() {
        buzzLocked = false;
        activePlayerId = null;

        // ‚õî On peut aussi notifier le front d‚Äôun reset
        sseController.sendEvent("reset");

        return "Tour r√©initialis√©.";
    }

    public List<Player> getScores() {
        return new ArrayList<>(players.values());
    }
}